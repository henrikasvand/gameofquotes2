{"version":3,"sources":["dragond.png","Quote.js","QuoteList.js","ServiceClient.js","QuoteForm.js","QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quote","removeQuote","props","quotes","id","changeQuote","this","author","quotetext","type","onClick","value","Component","QuoteList","listitemit","sort","s1","s2","map","q","ind","key","getQuotes","a","axios","get","haeNytPrkl","data","addQuoteData","post","console","log","deleteAll","delete","deleteOne","QuoteForm","state","newAuthor","e","setState","target","newQuotetext","buttonClick","preventDefault","addQuote","deleteButt","deleteAllDB","placeholder","onChange","QuoteBox","getQuotesDB","jotain","addQuoteDB","uuid","push","removeQuoteDB","idToRemove","findIndex","splice","PlayTone","Tone","bpm","toMaster","triggerAttackRelease","App","className","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,qC,qPCEtBC,E,2MACjBC,YAAa,WACT,EAAKC,MAAMD,YAAY,EAAKC,MAAMC,OAAOC,K,EAE7CC,YAAa,WACT,EAAKH,MAAMG,YAAY,EAAKH,MAAMC,OAAOC,K,wEAGzC,OACI,6BACQ,qCAAWE,KAAKJ,MAAMC,OAAOI,OAA7B,KACA,sCAAYD,KAAKJ,MAAMC,OAAOK,UAA9B,KACA,2BACI,4BAAQC,KAAK,SAASC,QAASJ,KAAKL,aAApC,UADJ,IACqE,4BAAQQ,KAAK,SAASE,MAAM,eAAeD,QAASJ,KAAKD,aAAzD,sB,GAbtDO,aCEdC,E,iLACP,IAAD,OAEDC,EAAaR,KAAKJ,MAAMC,OACvBY,MAAK,SAAUC,EAAIC,GAChB,OAAOA,EAAGb,GAAKY,EAAGZ,MAErBc,KAAI,SAACC,EAAGC,GACL,OAAQ,kBAAC,EAAD,CAAOjB,OAAQgB,EAAGlB,YAAa,EAAKC,MAAMD,YAAaoB,IAAKF,EAAEf,GAAIC,YAAc,EAAKH,MAAMG,iBAE3G,OACI,6BACI,sCACCS,O,GAbsBF,a,wBCFjCU,EAAS,uCAAG,4BAAAC,EAAA,sEACQC,IAAMC,IAAI,cADlB,cACVC,EADU,yBAEPA,EAAWC,MAFJ,2CAAH,qDAKTC,EAAY,uCAAG,WAAOD,GAAP,SAAAJ,EAAA,sEACXC,IAAMK,KAAK,aAAcF,GADd,gCAEVG,QAAQC,IAAIJ,IAFF,2CAAH,sDAKZK,EAAS,uCAAG,sBAAAT,EAAA,sEACRC,IAAMS,OAAO,cADL,OAEdH,QAAQC,IAAI,gCAFE,2CAAH,qDAKTG,EAAS,uCAAE,WAAOP,GAAP,SAAAJ,EAAA,sEACPC,IAAMS,OAAN,qBAA2BN,IADpB,2CAAF,sDCbMQ,E,2MACjBC,MAAQ,CAAE7B,OAAQ,GAAIC,UAAW,I,EACjC6B,UAAY,SAACC,GAAQ,EAAKC,SAAS,CAAEhC,OAAQ+B,EAAEE,OAAO7B,S,EACtD8B,aAAe,SAACH,GAAQ,EAAKC,SAAS,CAAE/B,UAAW8B,EAAEE,OAAO7B,S,EAC5D+B,YAAY,SAACJ,GACTA,EAAEK,iBACF,EAAKzC,MAAM0C,SAAX,eAAwB,EAAKR,QAC7B,EAAKG,SAAS,CAAChC,OAAO,GAAGC,UAAU,M,EAEvCqC,WAAW,SAACP,GACRA,EAAEK,iBACF,EAAKzC,MAAM4C,e,wEAIX,OACI,6BACI,8BACI,2BAAOrC,KAAK,OAAOsC,YAAY,QAC3BpC,MAAOL,KAAK8B,MAAM7B,OAAQyC,SAAU1C,KAAK+B,YAC7C,2BAAO5B,KAAK,OAAOsC,YAAY,SAC3BpC,MAAOL,KAAK8B,MAAM5B,UAAWwC,SAAU1C,KAAKmC,eAChD,4BAAQhC,KAAK,SAASE,MAAM,YAAYD,QAASJ,KAAKoC,aAAtD,cACA,4BAAQjC,KAAK,SAASE,MAAM,aAAaD,QAASJ,KAAKuC,YAAvD,aACA,2BAAG,wI,GAxBgBjC,a,iBCSlBqC,E,2MACjBb,MAAQ,CAAEjC,OAAQ,I,EAElB+C,Y,sBAAc,4BAAA3B,EAAA,sEACSD,IADT,OACN6B,EADM,OAEV,EAAKZ,SAAS,CAAEpC,OAAQgD,IAFd,2C,EAKdC,W,uCAAa,WAAOzB,GAAP,SAAAJ,EAAA,sEACHK,EAAaD,GADV,OAET,EAAKuB,cAFI,2C,wDAKbJ,Y,sBAAc,sBAAAvB,EAAA,sEACJS,IADI,OAEV,EAAKkB,cAFK,2C,EAUdN,SAAW,SAAAzB,GACPA,EAAEf,GAAKiD,MACP,EAAKjB,MAAMjC,OAAOmD,KAAKnC,GACvB,EAAKoB,SAAS,EAAKH,OACnBN,QAAQC,IAAI,EAAKK,OACjB,EAAKgB,WAAWjC,I,EAGpBoC,c,uCAAgB,WAAOnD,GAAP,SAAAmB,EAAA,sEACNW,EAAU9B,GADJ,OAEZ,EAAK8C,cAFO,2C,wDAMhBjD,YAAc,SAACuD,GAEX,IAAIpC,EAAM,EAAKgB,MAAMjC,OAAOsD,WAAU,SAACtC,GAAD,OAAOA,EAAEf,KAAOoD,KAEtD,EAAKpB,MAAMjC,OAAOuD,OAAOtC,EAAK,GAC9B,EAAKmB,SAAS,EAAKH,OACnB,EAAKmB,cAAcC,I,EAGvBnD,YAAc,SAACD,GACX,IAAIgB,EAAM,EAAKgB,MAAMjC,OAAOsD,WAAU,SAACtC,GAAD,OAAOA,EAAEf,KAAOA,KACtD0B,QAAQC,IAAIX,I,mFA7BZd,KAAK4C,gB,+BAiCL,OACI,6BACI,kBAAC,EAAD,CAAWN,SAAUtC,KAAKsC,SAAUE,YAAaxC,KAAKwC,cACtD,kBAAC,EAAD,CAAW3C,OAAQG,KAAK8B,MAAMjC,OAAQF,YAAaK,KAAKL,YAAaI,YAAaC,KAAKD,mB,GAvDjEO,a,QCUtC,SAAS+C,IACPC,YAAeC,IAAIlD,MAAQ,KACnB,IAAIiD,SAAaE,WACnBC,qBAAqB,KAAM,MAIpBC,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,4BAAQhE,GAAG,SAASM,QAASiD,KAA7B,qCACA,kBAAC,EAAD,SCFFU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf0C,UAAUC,cAAcQ,YAI1BzD,QAAQC,IACN,iHAKE8C,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBpD,QAAQC,IAAI,sCAGR8C,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACL7D,QAAQ6D,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,GAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQ7E,IAAI,gBAEnB,MAApB8E,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BV,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL5D,QAAQC,IACN,oEAvFA+E,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCnD,QAAQC,IACN,iHAMJ4C,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.0ebef601.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dragond.439b9e6c.png\";","import React, { Component } from 'react'\r\n\r\nexport default class Quote extends Component {\r\n    removeQuote= ()=>{\r\n        this.props.removeQuote(this.props.quotes.id);\r\n    }\r\n    changeQuote= ()=>{\r\n        this.props.changeQuote(this.props.quotes.id);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                    <p>author:{this.props.quotes.author}:</p>\r\n                    <p>quote: \"{this.props.quotes.quotetext}\"</p>\r\n                    <p>\r\n                        <button type=\"button\" onClick={this.removeQuote}>Remove</button> <button type=\"button\" value=\"Change Quote\" onClick={this.changeQuote}>Change Quote</button>\r\n                        \r\n                    </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Quote from './Quote'\r\n\r\n\r\nexport default class QuoteList extends Component {\r\n    render() {\r\n\r\n        var listitemit = this.props.quotes\r\n            .sort(function (s1, s2) {\r\n                return s2.id - s1.id;\r\n            })\r\n            .map((q, ind) => {\r\n                return (<Quote quotes={q} removeQuote={this.props.removeQuote} key={q.id} changeQuote={ this.props.changeQuote} />)\r\n            })\r\n        return (\r\n            <div>\r\n                <h3>Quotes</h3>\r\n                {listitemit}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import axios from 'axios'\r\n\r\nconst getQuotes = async ()=>{\r\n    let haeNytPrkl= await axios.get('api/quotes');\r\n    return haeNytPrkl.data;\r\n}\r\n\r\nconst addQuoteData = async (data)=>{\r\n    await axios.post('api/quotes', data)\r\n    return console.log(data);\r\n}\r\n\r\nconst deleteAll = async ()=>{\r\n    await axios.delete('api/quotes');\r\n    console.log(\"Everything has been deleted!\");\r\n}\r\n\r\nconst deleteOne =async (data) =>{\r\n    await axios.delete(`api/quotes/${data}`)\r\n}\r\n\r\nexport {getQuotes,addQuoteData, deleteAll, deleteOne};","import React, { Component } from 'react'\r\nimport { deleteAll } from './ServiceClient';\r\n\r\n\r\nexport default class QuoteForm extends Component {\r\n    state = { author: '', quotetext: '' };\r\n    newAuthor = (e) => { this.setState({ author: e.target.value }); }\r\n    newQuotetext = (e) => { this.setState({ quotetext: e.target.value }); }\r\n    buttonClick=(e)=> {\r\n        e.preventDefault();\r\n        this.props.addQuote({...this.state});\r\n        this.setState({author:'',quotetext:''})\r\n    }\r\n    deleteButt=(e)=>{\r\n        e.preventDefault();\r\n        this.props.deleteAllDB();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <input type=\"text\" placeholder=\"Hodor\"\r\n                        value={this.state.author} onChange={this.newAuthor} />\r\n                    <input type=\"text\" placeholder=\"Hodor!\"\r\n                        value={this.state.quotetext} onChange={this.newQuotetext} />\r\n                    <button type=\"button\" value=\"Add Quote\" onClick={this.buttonClick} >Add Quote </button>\r\n                    <button type=\"button\" value=\"Delete All\" onClick={this.deleteButt}>Dracarys!</button>\r\n                    <p><em>\"Dracarys!\" disintegrates everything. Be mindful about it. Don't let the power get to your head!</em></p>\r\n                    \r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport QuoteList from './QuoteList'\r\nimport QuoteForm from './QuoteForm'\r\nimport uuid from 'react-uuid'\r\nimport { getQuotes, addQuoteData, deleteAll, deleteOne } from './ServiceClient'\r\n\r\n\r\n// var quotes = [{ id: 1, author: \"Ygritte\", quotetext: \"You know nothing, Jon Snow!\" },\r\n// { id: 2, author: \"Tyrion Lannister\", quotetext: \"Itâ€™s not easy being drunk all the time. If it were easy, everyone would do it.\" },\r\n// {id: 3, author:\"Hodor\", quotetext:\"Hodor!!\"},\r\n// {id: 4,author:\"Danerys Targaryen\", quotetext:\"I will take what is mine with fire and blood.\"}]\r\n\r\n\r\nexport default class QuoteBox extends Component {\r\n    state = { quotes: [] }\r\n\r\n    getQuotesDB = async () => {\r\n        let jotain = await getQuotes()\r\n        this.setState({ quotes: jotain });\r\n    }\r\n\r\n    addQuoteDB = async (data) => {\r\n        await addQuoteData(data);\r\n        this.getQuotesDB();\r\n    }\r\n\r\n    deleteAllDB = async () => {\r\n        await deleteAll();\r\n        this.getQuotesDB();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuotesDB();\r\n    }\r\n\r\n\r\n    addQuote = q => {\r\n        q.id = uuid();\r\n        this.state.quotes.push(q);\r\n        this.setState(this.state);\r\n        console.log(this.state);\r\n        this.addQuoteDB(q);\r\n    }\r\n\r\n    removeQuoteDB = async (id) => {\r\n        await deleteOne(id);\r\n        this.getQuotesDB();\r\n    }\r\n\r\n\r\n    removeQuote = (idToRemove) => {\r\n        //find the index of the quote to remove\r\n        var ind = this.state.quotes.findIndex((q) => q.id === idToRemove);\r\n        //remove based on the index\r\n        this.state.quotes.splice(ind, 1);\r\n        this.setState(this.state);\r\n        this.removeQuoteDB(idToRemove);\r\n    }\r\n\r\n    changeQuote = (id) => {\r\n        var ind = this.state.quotes.findIndex((q) => q.id === id);\r\n        console.log(ind);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <QuoteForm addQuote={this.addQuote} deleteAllDB={this.deleteAllDB} />\r\n                <QuoteList quotes={this.state.quotes} removeQuote={this.removeQuote} changeQuote={this.changeQuote} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// var defaultquotes = [{ id: 1, author: \"Ygritte\", quotetext: \"You know nothing, Jon Snow!\" }]","import React from 'react';\nimport logo from './dragond.png';\nimport './App.css';\nimport QuoteBox from './QuoteBox'\nimport * as Tone from \"tone\";\nimport { Synth } from \"tone\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button id=\"button\" onClick={PlayTone()}>Ta taa, tata ta taa, tata ta taa!</button>\n        <QuoteBox/>\n      </header>\n    </div>\n  );\n  }\n\n\nlet synth;\n\nfunction PlayTone(){\n  Tone.Transport.bpm.value = 120;\n  synth = new Tone.Synth().toMaster();\n  synth.triggerAttackRelease(\"C4\", \"8n\");\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}